# -*- python -*-
# ex: set filetype=python:

import os

from buildbot.plugins import changes
from buildbot.plugins import util

import config_module

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}
c['buildbotNetUsageData'] = 'basic'
c['collapseRequests'] = False

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

c['workers'] = config_module.workers

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': os.environ.get("BUILDBOT_WORKER_PORT", 9989)}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

# c['change_source'] = []
# c['change_source'].append(
#     changes.GitHubPullrequestPoller(
#         "gnuradio",
#         "gnuradio",
#         branches=["maint", "master", "next", "python3"],
#         pollInterval=5 * 60,
#         token=os.environ.get("BUILDBOT_ACCESS_TOKEN", None),
#         category="pulls",
#         repository_type="https",
#         pollAtLaunch=True,
#         magic_link=True, ))

c['builders'] = config_module.builders.get(c["workers"])

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = config_module.schedulers.get(c["builders"])

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# like IRC bots.

c['services'] = []
reporters = config_module.reporters.get()
c['services'].extend(reporters)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "GNU Radio"
c['titleURL'] = "https://www.gnuradio.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = os.environ.get("BUILDBOT_WEB_URL", "http://localhost:8010/")

####### Webinterface configuration

authz = util.Authz(
    allowRules=[
        # util.AnyEndpointMatcher(role="admins"),
        util.AnyEndpointMatcher(
            role="admins", defaultDeny=False),
        util.AnyControlEndpointMatcher(
           role="admins"),
    ],
    roleMatchers=[
        util.RolesFromUsername(roles=["admins"], usernames=["noc0lour","jmcorgan"]),
        util.RolesFromGroups(),
    ]

)

PR_props=[
    "github.base.ref",
    "github.number",
    "github.mergeable",

]

c['www'] = {
    "allowed_origins": ["*"],
    "port": int(os.environ.get("BUILDBOT_WEB_PORT", 8010)),
    "auth": util.GitHubAuth(
        os.environ.get("BUILDBOT_OAUTH_CLIENT", ""),
        os.environ.get("BUILDBOT_OAUTH_KEY", "")),
    "authz": authz,
    "plugins": {
        "waterfall_view": {},
        "console_view": {}
    },
    "change_hook_dialects": {
        "github": {
            "secret": os.environ.get("BUILDBOT_HOOK_SECRET"),
            "strict": True,
            "github_property_whitelist": PR_props
        }
    }
}

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url':
    os.environ.get("BUILDBOT_DB_URL", "sqlite://").format(**os.environ),
}
